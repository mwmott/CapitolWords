# Capitolwords group project - Mike, Alex, Brian

# In our second attempt of tackling the CapitolWords API project, 
# we worked through timeseries' of the top users of the word "drone." 
# We found 20 top users, did an example timeseries for one, and also
# did a ggplot of all the users over time and a timeseries for all 
# occurences of "drone" for context.

# We then worked to figure out how to do it as a loop for all 20 of them. 
# Currently we are stuck on that loop, the error message for which is below.

# Mark helped us create dotchart also to better see our data, which shows
# the word drone said over time sorted by the last time speakers said it.
# Our goal from here on is to look at that chart, find interesting outliers
# and figure out if there are connections between those who spoke the most 
# about drones, those who sponsor bills, and those who are being paid in
# campaign contributions by top drone manufacturers.
##Mike's code is first and then Alex's code with Mark is second.

# "Drone" word in congressional record since '96
dronets= sll_cw_timeseries("drone",key="b1884b38a7e04ffeb9bdc91a0a63fe1b")
plot(dronets$day,dronets$count)

# ggplot of word 'drone' over time, sorted by party.
install.packages(ggplot2)
library(ggplot2)
dat_d <- sll_cw_timeseries(phrase='drones', party="D", 
key = "6a0998f8ba3c4a8b888ef28b20975174")
dat_d$party <- rep("D", nrow(dat_d))
dat_r <- sll_cw_timeseries(phrase='drones', party="R", 
key = "6a0998f8ba3c4a8b888ef28b20975174")
dat_r$party <- rep("R", nrow(dat_r))
dat_both <- rbind(dat_d, dat_r)
ggplot(dat_both, aes(day, count, colour=party)) + geom_line() +
theme_grey(base_size=20) + scale_colour_manual(values=c("blue","red"))

# Original loop code from class
install.packages(devtools)
library(devtools)
install_github("govdat","cocteau")
library(govdat)
for(i in 1:nrow(senate)){
tmp = sll_cw_phrases("legislator", senate$id[i], 
key = "6a0998f8ba3c4a8b888ef28b20975174")
print(paste(senate$last_name[i], tmp$ngram[1]))
}

# Attempt at making timeseries loop. See updated from Alex.
for(i in 1:nrow(senate)){
tmp = sll_cw_timeseries("drones", senate$id[i], 
key = "6a0998f8ba3c4a8b888ef28b20975174")
print(paste(senate$last_name[i], tmp$ngram[1]))
}

# Show top legislators who use the word drone - from here we might be able 
# to see whether they stopped. Later we used the dotchart to better visualize this. 
topdroneusers=sll_cw_entity_phrases(entity="legislator",phrase='drone',sort="count",key="b1884b38a7e04ffeb9bdc91a0a63fe1b")

# We noticed the top legislator to use "drone is Rand Paul, bioguide - P000603. 
# The only time he said the word drone was on March 6th, where he said it 235 
# times in a filibuster against Obama, whom he claimed was advocating for a drone 
# strike program within the U.S.
sll_cw_timeseries("drone", bioguide_id="P000603", "1996-01-01","2013-11-22", key="b1884b38a7e04ffeb9bdc91a0a63fe1b")

# Top 20 users of word drones w/ numbers
print(paste(topdroneusers$legislator[i],topdroneusers$count[1:20]))

# Top 20 drone users - just the bioguides
top20 = paste(topdroneusers$legislator[1:20])

# Loop baby! Just need to figure out how to see them all at once.
for(i in topdroneusers$legislator[1:20]){
ts= sll_cw_timeseries("drone", bioguide_id=i, "1996-01-01","2013-11-22", key="b1884b38a7e04ffeb9bdc91a0a63fe1b")
plot(ts$day,ts$count)
}

# Also experimented for future use with working with drone legislation using OpenStates API:

#Installing relevant packages/getting JSON
install.packages("rjson")
library(rjson)
install.packages("XML")
library(XML)
url = "openstates.org/api/v1//bills/?q=drone&apikey=b1884b38a7e04ffeb9bdc91a0a63fe1b"
response = getURL(url)
dronebills = fromJSON(response)

# Converting into dataframe. This gives us a list of 62 bills with comma sep. title,
# date, etc. Need to figure out how to convert into more of a df. Function syntax gathered from
# http://stackoverflow.com/questions/6526646/getting-dataframe-directly-from-json-file:
dronebillsdf= as.data.frame(t(sapply(dronebills, unlist)))


## ALEX'S CODE WITH MARK ##


## Create loop that prints all of the last names and top words from legislators.
## for(i in 1:nrow(senate)){

## tmp = sll_cw_phrases("legislator", senate$id[i], key = "6a0998f8ba3c4a8b888ef28b20975174")

## print(paste(senate$last_name[i], tmp$ngram[1]))

##}


tmp = sll_cw_entity_phrases("legislator", phrase="drone", key="6a0998f8ba3c4a8b888ef28b20975174")


## Not sure why we do this. Something to do with solving the problem of retired legislators.
tmp$last_name = NA

tmp$first_name = NA


## Create a new data frame for all legislators.
congnames = rbind(senate[,c("id","first_name","last_name")],house[,c("id","first_name","last_name")])


## Merge these with the top drone sayers.
merge(tmp,congnames,by.x="legislator",by.y="id",all.x=TRUE)


## Store as dat.
dat = merge(tmp,congnames,by.x="legislator",by.y="id",all.x=TRUE)

over3<- subset(dat, count > 3)

## Order increasing
over3 = over3[order(over3$count),]


## Order Decreasing
over3 = over3[order(over3$count,decreasing=TRUE),]


## Create dronetimeseries vector using the sorted legislator by drone usage.
dronetimeseries<- sll_cw_timeseries("drone", bioguide_id=over3$legislator[1],key="6a0998f8ba3c4a8b888ef28b20975174")


## Create loop that stores these all into a new data frame.
dronetimeseries = data.frame()

for(i in 1:20){

data <- sll_cw_timeseries("drone", bioguide_id=over3$legislator[i],key="6a0998f8ba3c4a8b888ef28b20975174")

newdf <- data.frame(id=over3$legislator[i],first=over3$first_name[i],last=over3$last_name[i],day=data$day,count=data$count)

dronetimeseries = rbind(dronetimeseries,newdf)

}

View(dronetimeseries)

table(dronetimeseries$id)

## Make lattice plot of dronetimeseries data frame
library(lattice)

xyplot(count~day|id,data=dronetimeseries)

xyplot(count~day|id,data=dronetimeseries,type="h")


## Lattice plot was all ids because not enough data. Dot plot shows drone sayers over time with bubble size indicating
## how many sayers there were on a given day.

## WE GET LOST ON DOT PLOT. IT'S NOT ORGANIZED BY WHAT WE NEED
dotplot(factor(id,levels=over3$legislator)~day,data=dronetimeseries,cex=log(dronetimeseries$count+1),col=rainbow(nrow(dronetimeseries)))


## Post Friday Memo:

#For our next step in our project, we started looking at how we could
#incorporate other APIs from Sunlight to get towards what we want as
#journalists. Looking for correlations between the word 'drone' and 
#legislation surrounding drones, Mike (with help from Jeroen and his
#new package, JSONlite) created a new dataframe with 62 observations
#of drone legislation from the OpenStates API.

install.packages("devtools")
library(devtools)
install_github("JSONlite", "jeroenooms")
url = "openstates.org/api/v1//bills/?q=drone&apikey=b1884b38a7e04ffeb9bdc91a0a63fe1b"
response = getURL(url)
dronebills = fromJSON(response)

#Note: with the above code, JSONlite gives an alternative fromJSON
#function than the one that rjson provides. To use this package/function
#Mike had to download XCode, install command line tools and edit: 
#/Library/Frameworks/R.framework/Resources/etc to have these two 
#lines:CC=clang and CXX=clang++. He used terminal to make a
#.R directory (mkdir ~/.R) then used nano to do this and saved a new 
#file there called ~/.R/Makevars, with help from Jeroen.

#Earlier Brian put together a list of the top campaign finance 
#contributors who were drone manufacturers, accessible here: 
#http://bit.ly/IerBco. Using this, we plan on seeing who sponsored 
#the legislation using the OpenStates API, and see if it matches 
#(or inversely matches) congressman who are receiving campaign contributions. 
#We'll then investigate how that lines up with the dotchart you helped us make.

##POST MONDAY MEMO:

#Using Jeroen's code above, mike made the dataset 'mydata' of all the bills. He then took
#out all the non-drone related bills using rbind (help from Alex here).

mydata[rbind(-c(2,52,53,55,58,59,60,61,61,62,63))]

#He then took out subjects column from mydata because it was a list and was unnceccesary,
#impeded creation of a .csv dataset.
mydata$subjects = NULL

### WE GET LOST HERE: we tried to loop the dataset mike named (now called rightbills), 
### but kept getting the error message of having different rows, 1, 0.

billsponsors = data.frame()

for(i in 1:nrow(rightbills)){
tmp<-sll_os_billlookup(billid=rightbills$bill_id[i], state=rightbills$state[i], session=rightbills$session[i], key="6a0998f8ba3c4a8b888ef28b20975174")

newdf <- data.frame(rightbills$bill_id[i],unlist(tmp$sponsors[i]))

billsponsors = rbind(billsponsors,newdf)
}

## BUT THIS WORKS, SO WE MANUALLY PASTED THE LIST INTO EXCEL, DON'T HATE US :)

View(billsponsors)

for(i in 1:nrow(rightbills)){
tmp<- sll_os_billlookup(billid=rightbills$bill_id[i], state=rightbills$state[i], session=rightbills$session[i], key="6a0998f8ba3c4a8b888ef28b20975174")
print(paste(rightbills$bill_id[i],tmp$sponsors[i]))

}



View(billsponsors)

# We came up with a list of six sponsors: Jack M. Ciattarelli R, Ira I. Silverstein D., Barabara Wheeler R., Kesha K. Ram D., 
# Michael Special R, Jim Newberger R

# We wanted to merge that data frame with the data frame dronetimeseries, which created our dotplot but realized
# that bill APIs only search the state legislature through SunLightFoundation.

# So, we decided to look for any other api that would look up congressional bill sponsors. We found one 
# through the NYTimes: nyt_cg_billscosponsor.

# We made a list of unique bios from dronetimeseries:

uniquebios<- unique(dronetimeseries$id)

uniquebios<- data.frame(uniquebios)

# And ran the following loop to search the NYTimes for billcosponsors.

for(i in 1:nrow(uniquebios)){
tmp<- nyt_cg_billscosponsor(memberid=uniquebios$uniquebios[i], type = "cosponsored", key="bc4784bf8461bc2376aada37bb5752ab:3:67976885")
print(paste(uniquebios$uniquebios[i],tmp[i]))

}

# The data was a mess:

#Top Output:
#[1] "P000603 OK"
#[1] "B001261 Copyright (c) 2013 The New York Times Company. All Rights Reserved."
#[1] "K000336 list(list(id = \"K000336\", member_uri = \"http://api.nytimes.com/svc/politics/v3/us/legislative/congress/members/K000336.json\", name = \"Dennis J. Kucinich\", num_results = \"20\", offset = \"0\", bills = list(list(congress = \"112\", number = \"H.R.6591\", bill_uri = \"http://api.nytimes.com/svc/politics/v3/us/legislative/congress/112/bills/hr6591.json\", title = \"SIMPLE Voting Act\",

#And we aren't sure why. Now, we are stuck.
